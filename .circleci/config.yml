version: 2.1
executors:
  pixelfederation-docker-client:
    docker:
      - image: pixelfederation/docker-client:20.10.5-compose
    working_directory: ~/workdir

aliases:
    # Remote Docker config
  - &docker-remote-version
    setup_remote_docker:
      # https://circleci.com/docs/2.0/building-docker-images/#docker-version
      version: 20.10.2

    # Filters
  - &filter-run-on-local-branches
    filters:
      branches:
        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
        ignore: /pull\/[0-9]+/

  - &filter-run-on-forked-pull-requests
    filters:
      branches:
        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
        only: /pull\/[0-9]+/

  - &filter-run-on-tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

jobs:
  docker-bake-tagged:
    executor: pixelfederation-docker-client
    environment:
      REGISTRY: docker.io
      NAMESPACE: pixelfederation
      IMAGE: release-version-script
      SERVICES: releaser
      TAG_LATEST: latest
    steps:
      - checkout
      - *docker-remote-version
      - run:
          name: Export required dynamic env variables
          command: |-
            TAG="$(echo -n "$CIRCLE_TAG" | sed -E 's/^v(.*)/\1/g')"
            echo "export TAG='$TAG'" >> $BASH_ENV
      - run:
          name: Print env
          command: env
      - run:
          name: Print docker info
          command: docker info
      - run:
          name: Login to Docker Hub
          command: >-
            DOCKER_REGISTRY="$REGISTRY"
            DOCKER_USERNAME="$DOCKER_HUB_USERNAME"
            DOCKER_PASSWORD="$DOCKER_HUB_TOKEN"
            docker-registry-login
      - run:
          name: Enable Docker Buidx
          environment:
            DOCKER_BUILDX_CONTEXT_CREATE: "1"
            DOCKER_BUILDX_BUILDER_CREATE: "1"
          command: docker-use-buildx
      - run:
          name: Docker Buildx Bake all required images
          command: docker buildx bake --progress=plain $SERVICES

  docker-bake:
    executor: pixelfederation-docker-client
    environment:
      REGISTRY: docker.io
      NAMESPACE: pixelfederation
      IMAGE: release-version-script
      SERVICES: releaser
    steps:
      - checkout
      - *docker-remote-version
      - run:
          name: Export required dynamic env variables
          command: |-
            TAG="build-$CIRCLE_SHA1"
            echo "export TAG='$TAG'" >> $BASH_ENV
      - run:
          name: Print env
          command: env
      - run:
          name: Print docker info
          command: docker info
      - run:
          name: Login to Docker Hub
          command: >-
            DOCKER_REGISTRY="$REGISTRY"
            DOCKER_USERNAME="$DOCKER_HUB_USERNAME"
            DOCKER_PASSWORD="$DOCKER_HUB_TOKEN"
            docker-registry-login
      - run:
          name: Enable Docker Buidx
          environment:
            DOCKER_BUILDX_CONTEXT_CREATE: "1"
            DOCKER_BUILDX_BUILDER_CREATE: "1"
          command: docker-use-buildx
      - run:
          name: Docker Buildx Bake all required images
          command: docker buildx bake --progress=plain $SERVICES

  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    steps:
      - checkout
      - run:
          name: Shellcheck sh scripts
          command: shellcheck *.sh

  validate-commit-message:
    docker:
      - image: node:lts-alpine
    steps:
      - checkout
      - run:
          name: Install git
          command: apk add --no-cache git
      - run:
          name: Install commitlint
          command: |-
            npm config set unsafe-perm true
            npm i -g @commitlint/cli @commitlint/config-conventional
      - run:
          name: Validate commit message format
          command: commitlint --from=HEAD~5 -V

  releaser-dry-run:
    docker:
      - image: docker.io/pixelfederation/release-version-script:build-$CIRCLE_SHA1
    working_directory: /usr/src/app
    environment:
      DEBUG: "0"
      DRY_RUN: "1"
      GH_TOKEN: "xxx"
      GH_RELEASE_DRAFT: "true"
      GH_REPOSITORY: "pixelfederation/release-version-script"
    steps:
      - checkout
      - run:
          name: Dry run release-version script
          command: release-version
      - run:
          name: Dry run release-version script with debug
          when: on_fail
          environment:
            DEBUG: "1"
          command: release-version

  releaser:
    docker:
      - image: docker.io/pixelfederation/release-version-script:build-$CIRCLE_SHA1
    working_directory: /usr/src/app
    environment:
      DEBUG: "1"
      DRY_RUN: "0"
      GH_RELEASE_DRAFT: "false"
      GH_REPOSITORY: "pixelfederation/release-version-script"
    steps:
      - checkout
      - run:
          name: Run release-version script
          command: release-version

workflows:
  version: 2.1
  pull-request-checks-trusted:
    when:
      not:
        equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - validate-commit-message:
          <<: *filter-run-on-local-branches
      - shellcheck:
          <<: *filter-run-on-local-branches
      - docker-bake:
          context: release-version-script-dockerhub
          requires:
            - validate-commit-message
            - shellcheck
      - releaser-dry-run:
          requires:
            - docker-bake

  pull-request-checks-untrusted:
    when:
      not:
        equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - validate-commit-message:
          <<: *filter-run-on-forked-pull-requests
      - shellcheck:
          <<: *filter-run-on-forked-pull-requests
      - approve-docker-bake:
          type: approval
          requires:
            - validate-commit-message
            - shellcheck
      - docker-bake:
          context: release-version-script-dockerhub
          requires:
            - approve-docker-bake
      - releaser-dry-run:
          requires:
            - docker-bake
  release:
    when:
      equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - validate-commit-message
      - shellcheck
      - docker-bake:
          context: release-version-script-dockerhub
          requires:
            - validate-commit-message
            - shellcheck
      - releaser-dry-run:
          requires:
            - docker-bake
      - approve-release:
          type: approval
          requires:
            - releaser-dry-run
      - releaser:
          context: release-version-script-github
          requires:
            - approve-release

  post-release:
    jobs:
      - docker-bake-tagged:
          <<: *filter-run-on-tags
          context: release-version-script-dockerhub
